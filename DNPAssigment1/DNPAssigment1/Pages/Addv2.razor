@page "/Addv2"
@using DNPAssigment1.Data
@using DNPAssigment1.Models
@using global::Models
@using System.Text.Json
@inject IFamilyService FamilyService;

<form>
<div class="form-row">
    <div class="form-group col">
        <label>Choose what needs to be added: </label>
        <select class="form-control" @bind="selectedAddType" style="background-color: #f7f7f7">
            <option selected value="family">Family</option>
            <option value="adult">Adult</option>
            <option value="child">Child</option>
            <option value="pet">Pet</option>
        </select>
    </div>
</div>

<hr>

@switch (selectedAddType)
{
    case "family":
    {
        <form>
            <div class="form-row">
                <div class="form-group col">
                    <label>Street name</label>
                    <input class="form-control" placeholder="Street name [Required]" @bind="familyStreetName">
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>House number</label>
                    <input class="form-control" placeholder="House number [Required]" @bind="familyHouseNumber">
                </div>
            </div>
            <button class="btn btn-outline-dark btn-sm" @onclick="addFamily">Add family</button>
            <label style="color: red">
                <b>
                    <i>No validation available yet! Please fill in correctly!</i>
                </b>
            </label>
        </form>
        break;
    }
    case "adult":
    {
        <form>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label>First name</label>
                    <input class="form-control" placeholder="First name [NotNull]" @bind="adultFirstname">
                </div>
                <div class="form-group col-md-6">
                    <label>Last name</label>
                    <input class="form-control" placeholder="Last name [NotNull]" @bind="adultLastname">
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label>Hair color</label>
                    <select class="form-control" @onchange="adultHairColorSelected" style="background-color: #f7f7f7">
                        @foreach (HairColor hairColor in (HairColor[]) Enum.GetValues(typeof(HairColor)))
                        {
                            <option value="@hairColor">@hairColor.ToString()</option>
                        }
                    </select>
                </div>
                <div class="form-group col-md-6">
                    <label>Eye color</label>
                    <select class="form-control" @onchange="adultEyeColorSelected" style="background-color: #f7f7f7">
                        @foreach (EyeColor eyeColor in (EyeColor[]) Enum.GetValues(typeof(EyeColor)))
                        {
                            <option value="@eyeColor">@eyeColor.ToString()</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-3">
                    <label>Age</label>
                    <input class="form-control" placeholder="Age (0-125) [NotNull]" @bind="adultAge">
                </div>
                <div class="form-group col-md-3">
                    <label>Weight</label>
                    <input class="form-control" placeholder="Weight (1-250) [kg] [NotNull]" @bind="adultWeight">
                </div>
                <div class="form-group col-md-3">
                    <label>Height</label>
                    <input class="form-control" placeholder="Height (30-250) [cm] [NotNull]" @bind="adultHeight">
                </div>
                <div class="form-group col-md-3">
                    <label>Sex</label>
                    <select class="form-control" @onchange="adultSexSelected" style="background-color: #f7f7f7">
                        <option value="Prefer not to answer">Prefer not to answer</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                    </select>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label>Job</label>
                    <select class="form-control" @onchange="adultJobSelected" style="background-color: #f7f7f7">
                        @foreach (Job job in (Job[]) Enum.GetValues(typeof(Job)))
                        {
                            <option value="@job">@job.ToString()</option>
                        }
                    </select>
                </div>
                <div class="form-group col-md-6">
                    <label>Family (street)</label>
                    <select class="form-control" @onchange="adultFamilySelected" style="background-color: #f7f7f7">
                        @foreach (var family in Families)
                        {
                            <option value="@family.StreetName">@family.StreetName</option>
                        }
                    </select>
                </div>
            </div>
            <button class="btn btn-outline-dark btn-sm" @onclick="addAdult">Add adult</button>
            <label style="color: red">
                <b>
                    <i>No validation available yet! Please fill in correctly!</i>
                </b>
            </label>
        </form>
        break;
    }
    case "child":
    {
        <form>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label>First name</label>
                    <input class="form-control" placeholder="First name [NotNull]" @bind="childFirstname">
                </div>
                <div class="form-group col-md-6">
                    <label>Last name</label>
                    <input class="form-control" placeholder="Last name [NotNull]" @bind="childLastname">
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label>Hair color</label>
                    <select class="form-control" @onchange="childHairColorSelected" style="background-color: #f7f7f7">
                        @foreach (HairColor hairColor in (HairColor[]) Enum.GetValues(typeof(HairColor)))
                        {
                            <option value="@hairColor">@hairColor.ToString()</option>
                        }
                    </select>
                </div>
                <div class="form-group col-md-6">
                    <label>Eye color</label>
                    <select class="form-control" @onchange="childEyeColorSelected" style="background-color: #f7f7f7">
                        @foreach (EyeColor eyeColor in (EyeColor[]) Enum.GetValues(typeof(EyeColor)))
                        {
                            <option value="@eyeColor">@eyeColor.ToString()</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-3">
                    <label>Age</label>
                    <input class="form-control" placeholder="Age (0-125) [NotNull]" @bind="childAge">
                </div>
                <div class="form-group col-md-3">
                    <label>Weight</label>
                    <input class="form-control" placeholder="Weight (1-250) [kg] [NotNull]" @bind="childWeight">
                </div>
                <div class="form-group col-md-3">
                    <label>Height</label>
                    <input class="form-control" placeholder="Height (30-250) [cm] [NotNull]" @bind="childHeight">
                </div>
                <div class="form-group col-md-3">
                    <label>Sex</label>
                    <select class="form-control" @onchange="childSexSelected" style="background-color: #f7f7f7">
                        <option value="Prefer not to answer">Prefer not to answer</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                    </select>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Interests</label>
                    <label style="color: red">
                                    <b>
                                        <i>Do not add any interests, does not work yet!</i>
                                    </b>
                                </label>
                    <select class="form-control" @onchange="childInterestSelected" style="background-color: #f7f7f7">
                        @foreach (ChildInterestEnum childInterest in (ChildInterestEnum[]) Enum.GetValues(typeof(ChildInterestEnum)))
                        {
                            <option value="@childInterest">@childInterest.ToString()</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <button type="button" class="btn btn-outline-dark btn-block" @onclick="addInterestToList">Add</button>
                    <small class="form-text text-muted">Selected interests:@childInterestListString</small>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Family</label>
                    <select class="form-control" @onchange="childFamilySelected" style="background-color: #f7f7f7">
                        @foreach (var family in Families)
                        {
                            <option value="@family.StreetName">@family.StreetName</option>
                        }
                    </select>
                </div>
            </div>
        </form>
        <button class="btn btn-outline-dark btn-sm" style="margin-bottom: 1%" @onclick="addChild">Add child</button>
        <label style="color: red">
            <b>
                <i>No validation available yet! Please fill in correctly!</i>
            </b>
        </label>
        break;
    }
    case "pet":
    {
        <form>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label>Name</label>
                    <input class="form-control" placeholder="Name [Required]" @bind="petName">
                </div>
                <div class="form-group col-md-6">
                    <label>Age</label>
                    <input class="form-control" placeholder="Age [Required]" @bind="petAge">
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Species</label>
                    <select class="form-control" @onchange="petSpeciesSelected" style="background-color: #f7f7f7">
                        @foreach (PetSpecies petSpecies in (PetSpecies[]) Enum.GetValues(typeof(PetSpecies)))
                        {
                            <option value="@petSpecies">@petSpecies.ToString()</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Family</label>
                    <select class="form-control" @onchange="petFamilySelected" style="background-color: #f7f7f7">
                        @foreach (var family in Families)
                        {
                            <option value="@family.StreetName">@family.StreetName</option>
                        }
                    </select>
                </div>
            </div>
            <button class="btn btn-outline-dark btn-sm" @onclick="addPet">Add pet</button>
            <label style="color: red">
                <b>
                    <i>No validation available yet! Please fill in correctly!</i>
                </b>
            </label>
        </form>
        break;
    }
}
</form>


@code {
    string selectedAddType { get; set; } = "family"; //default value when page is loaded
    private IList<Family> Families;


    protected async override Task OnInitializedAsync()
    {
        Families = await FamilyService.GetFamilies();

        if (Families.Count > 0)
        {
            adultFamilyStreetname = Families[0].StreetName;
            childFamilyStreetname = Families[0].StreetName;
            petFamilyStreetname = Families[0].StreetName;
        }
        else adultFamilyStreetname = "Empty";

        childInterest = new ChildInterest();
        childInterest.InterestId = "Soccer";
    }

    // family----------------------------------------------------------------------------
    string familyStreetName;
    int? familyHouseNumber;


    public void addFamily()
    {
        Family newFamily = new Family();
        newFamily.HouseNumber = (int) familyHouseNumber;
        newFamily.StreetName = familyStreetName;
        newFamily.Children = new List<Child>();
        newFamily.Pets = new List<Pet>();
        FamilyService.AddFamily(newFamily);
    }

    // adult----------------------------------------------------------------------------
    string adultFirstname;
    string adultLastname;
    //int? adultId;
    string adultHairColor = (HairColor.Blond.ToString()).ToLower(); //preselected
    string adultEyeColor = EyeColor.Brown.ToString().ToLower(); //preselected
    int? adultAge;
    int? adultWeight;
    int? adultHeight;
    string adultSex = "Prefer not to answer"; //preselected
    string adultJob = Job.Teacher.ToString(); //preselected
    string adultFamilyStreetname; //preselected

    void adultHairColorSelected(ChangeEventArgs e)
    {
        adultHairColor = (e.Value.ToString()).ToLower();
    }

    void adultEyeColorSelected(ChangeEventArgs e)
    {
        adultEyeColor = (e.Value.ToString()).ToLower();
    }

    void adultSexSelected(ChangeEventArgs e)
    {
        adultSex = e.Value.ToString();
    }

    void adultJobSelected(ChangeEventArgs e)
    {
        adultJob = e.Value.ToString();
    }

    void adultFamilySelected(ChangeEventArgs e)
    {
        adultFamilyStreetname = e.Value.ToString();
    }

    public async void addAdult()
    {
        Adult newAdult = new Adult();
        newAdult.FirstName = adultFirstname;
        newAdult.LastName = adultLastname;
        newAdult.HairColor = adultHairColor;
        newAdult.EyeColor = adultEyeColor;
        newAdult.Age = (int) adultAge;
        newAdult.Weight = (int) adultWeight;
        newAdult.Height = (int) adultHeight;
        newAdult.JobTitle = adultJob;
        newAdult.Sex = adultSex;
    //Console.WriteLine(getJsonFormat(newAdult));
    //Console.WriteLine(adultFamilyStreetname);
        var familes = await FamilyService.GetFamilies();
        var selectedFamily = familes.FirstOrDefault(i => i.StreetName.Equals(adultFamilyStreetname));
        selectedFamily.Adults.Add(newAdult);
    //Console.WriteLine(getJsonFormat(selectedFamily));
        await FamilyService.Update(selectedFamily);
    }

    // child----------------------------------------------------------------------------
    string childFirstname;
    string childLastname;
    //int? childId;
    string childHairColor = HairColor.Blond.ToString().ToLower(); //preselected
    string childEyeColor = EyeColor.Brown.ToString().ToLower(); //preselected
    int? childAge;
    int? childWeight;
    int? childHeight;
    string childSex = "Prefer not answer"; //preselected
    string childFamilyStreetname; //preselected
    ChildInterest childInterest;
    string interestId;
    List<ChildInterest> childInterestList = new List<ChildInterest>();
    string childInterestListString = "";

    void childHairColorSelected(ChangeEventArgs e)
    {
        childHairColor = e.Value.ToString().ToLower();
    }

    void childEyeColorSelected(ChangeEventArgs e)
    {
        childEyeColor = e.Value.ToString().ToLower();
    }

    void childInterestSelected(ChangeEventArgs e)
    {
        string interestId = e.Value.ToString();
        childInterest.InterestId = interestId;
    }

    void childSexSelected(ChangeEventArgs e)
    {
        childSex = e.Value.ToString();
    }

    void childFamilySelected(ChangeEventArgs e)
    {
        childFamilyStreetname = e.Value.ToString();
    }

    void addInterestToList()
    {
        var temp = new ChildInterest();
        temp.InterestId = childInterest.InterestId;
        childInterestList.Add(temp);
        childInterestListString = JsonSerializer.Serialize(childInterestList);
    }

    public async void addChild()
    {
        Child newChild = new Child();
        newChild.FirstName = childFirstname;
        newChild.LastName = childLastname;
        newChild.HairColor = childHairColor;
        newChild.EyeColor = childEyeColor;
        newChild.Age = (int) childAge;
        newChild.Weight = (int) childWeight;
        newChild.Height = (int) childHeight;
        newChild.Sex = childSex;

    //TODO something wrong with childInterestList (not essential)
        foreach (var c in childInterestList)
        {
            newChild.ChildInterests.Add(c);
        }
        var familes = await FamilyService.GetFamilies();
        var selectedFamily = familes.FirstOrDefault(i => i.StreetName.Equals(childFamilyStreetname));
        selectedFamily.Children.Add(newChild);
        await FamilyService.Update(selectedFamily);
    }

    //pet---------------------------------------------------------------------------------------------------------------------
    string petSpecies = PetSpecies.Hamster.ToString(); //preselected
    string petName;
    int? petAge;
    string petFamilyStreetname; //preselected
    Family petFamily = new Family();


    void petSpeciesSelected(ChangeEventArgs e)
    {
        petSpecies = e.Value.ToString();
    }

    void petFamilySelected(ChangeEventArgs e)
    {
        petFamilyStreetname = e.Value.ToString();
    }

    async void addPet()
    {
        Pet newPet = new Pet();
        newPet.Name = petName;
        newPet.Age = (int) petAge;
        newPet.Species = petSpecies;

        var families = await FamilyService.GetFamilies();
        var selectedFamily = families.FirstOrDefault(i => i.StreetName.Equals(petFamilyStreetname));
        selectedFamily.Pets.Add(newPet);
        await FamilyService.Update(selectedFamily);
    }

    //for testing
    string getJsonFormat(Object obj)
    {
        return JsonSerializer.Serialize(obj);
    }


}