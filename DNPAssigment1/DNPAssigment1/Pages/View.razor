@inject IFamilyService FamilyService;
@inject IModalService ModalService;


@page "/view"
@using DNPAssigment1.Models
@using DNPAssigment1.Data
@using global::Models
@using System.Data.SqlTypes
@using Microsoft.AspNetCore.Mvc.Formatters
<div style="padding-bottom: 2%">
    <input value="@SearchTerm" @oninput="@((ChangeEventArgs __e) => FilterFamilies(
                                              __e.Value.ToString()))" placeholder="Search">
    @if (Families != null)
    {
        <span class="text-muted ml-2">
            Showing @FilteredFamilies.Count out of @Families.Count
        </span>
    }
</div>
@if (Families == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!Families.Any())
{
    <p>There are no families</p>
}
else
{
    <table class="table table-striped table-bordered table-hover">
        <thead >
        <tr>
            <th>Street Name</th>
            <th>House number</th>
            <th>Information</th>
            <AuthorizeView Policy="SecurityLevel2">
                <th>Remove</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @if (FilteredFamilies != null)
        {
            @foreach (var family in FilteredFamilies)
            {
                <tr>
                    <td>@family.StreetName</td>
                    <td>@family.HouseNumber</td>
                    <td>
                        <button @onclick="@(() => SetSelectedFamily(family))" class="btn btn-outline-dark btn-sm">More info.</button>
                    </td>
                    <AuthorizeView Policy="SecurityLevel2">
                        <td>
                            <button @onclick="@(() => RemoveFamily(family.Id))">
                                <i class="oi oi-trash" style="color:red"/>
                            </button>
                        </td>
                    </AuthorizeView>
                </tr>
            }
        }
        else
        {
            <p>There are no families</p>
        }
        </tbody>
    </table>
};

@code {
    string SearchTerm { get; set; }
    private IList<Family> Families;
    IList<Family> FilteredFamilies;// => Families != null ? 
     //   Families.Where(i => i.Adults.First().LastName.ToLower().Contains(SearchTerm.ToLower())).ToList() : null;

    protected async override Task OnInitializedAsync()
    {
        Families = await FamilyService.GetFamilies();
        FilteredFamilies = Families;
    }

    private void SetSelectedFamily(Family family)
    {
        FamilyService.setSelectedFamily(family);
        ModalService.Show<FamilyView>("Family details:");
    }

    private void RemoveFamily(int familyId)
    {
        Family familyToRemove = Families.First(f => f.Id == familyId);
        FamilyService.RemoveFamily(familyId);
        Families.Remove(familyToRemove);
        FilteredFamilies.Remove(familyToRemove);
    }

    private void FilterFamilies(string searchItem)
    {
        FilteredFamilies = Families.Where(i => i.StreetName.ToLower().Contains(searchItem.ToLower())).ToList();
    }
}