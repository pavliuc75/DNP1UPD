@inject IFamilyService FamilyService;

@page "/familyView"
@using DNPAssigment1.Models
@using DNPAssigment1.Data
@using global::Models
<!--<div class="form-inline">
    <label>Last name: </label>
    <label  class="ml-2">
        
    </label>
</div>-->
<div class="form-inline">
    <label>StreetName: </label>
    <label class="ml-2">
        <b>@selectedFam.StreetName</b>
    </label>
</div>
<br>
<div class="form-inline">
    <label>HouseNumber: </label>
    <label class="ml-2">
        <b>@selectedFam.HouseNumber</b>
    </label>
</div>
<br>
<h3>Adults:</h3>
@if (selectedFam.Adults == null)
{
    <p>Loading...</p>
}
else if (!selectedFam.Adults.Any())
{
    <p>There are no adults in the family</p>
}
else
{
    <table class="table table-striped table-bordered table-hover">
        <thead>
        <tr>
            <th>F. Name</th>
            <th>L. Name</th>
            <th>ID</th>
            <th>Hair Color</th>
            <th>Eye Color</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Job</th>
            <th>Sex</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var adult in selectedFam.Adults)
        {
            <tr>
                <td>@adult.FirstName</td>
                <td>@adult.LastName</td>
                <td>@adult.Id</td>
                <td>@adult.HairColor</td>
                <td>@adult.EyeColor</td>
                <td>@adult.Age</td>
                <td>@adult.Weight</td>
                <td>@adult.Height</td>
                <td>@adult.JobTitle</td>
                <td>@adult.Sex</td>
            </tr>
        }
        </tbody>
    </table>
}
<h3>Children:</h3>
@if (selectedFam.Children == null)
{
    <p>Loading...</p>
}
else if (!selectedFam.Children.Any())
{
    <p>There are no children in the family</p>
}
else
{
    <table class="table table-striped table-bordered table-hover">
        <thead>
        <tr>
            <th>F. Name</th>
            <th>L. Name</th>
            <th>ID</th>
            <th>Hair Color</th>
            <th>Eye Color</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>ChildInterests</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var child in selectedFam.Children)
        {
            <tr>
                <td>@child.FirstName</td>
                <td>@child.LastName</td>
                <td>@child.Id</td>
                <td>@child.HairColor</td>
                <td>@child.EyeColor</td>
                <td>@child.Age</td>
                <td>@child.Weight</td>
                <td>@child.Height</td>
                <td>@child.Sex</td>
                @if (child.ChildInterests.Count > 0)
                {
                  <td>@child.ChildInterests.First().InterestId</td>
                }
                else
                {
                    <td>No given interests...</td>
                }
            </tr>
        }
        </tbody>
    </table>
}
<h3>Pets:</h3>
@if (selectedFam.Pets == null)
{
    <p>Loading...</p>
}
else if (!selectedFam.Pets.Any())
{
    <p>There are no pets in the family</p>
}
else
{
    <table class="table table-striped table-bordered table-hover">
        <thead>
        <tr>
            <th>Species</th>
            <th>Name</th>
            <th>Age</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var pet in selectedFam.Pets)
        {
            <tr>
                <td>@pet.Species</td>
                <td>@pet.Name</td>
                <td>@pet.Age</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    Family selectedFam { get; set; }

    protected async override Task OnInitializedAsync()
    {
        selectedFam = FamilyService.getSelectedFamily();
    }

    private string GetInterests(Child child)
    {
        string s = "";
        foreach (var childInterest in child.ChildInterests)
            {
                s += childInterest.InterestId+ " ";
            }
        return s;
    }

    /*
    string getChildInterstList(List<ChildInterest> interests)
    {
        string result = "";
        for (int i = 0; i < interests.Count; i++)
        {
            
                result = result + ", " + interests[i].InterestId;  
            
        }
        return result;
    }
    */

}